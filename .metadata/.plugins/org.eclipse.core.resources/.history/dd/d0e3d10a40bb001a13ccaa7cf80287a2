package com.kh.chap01_list.part02_mvc.controller;

import java.util.ArrayList;
import java.util.Collections;

import com.kh.chap01_list.part02_mvc.model.vo.Music;

// controller : 사용자가 요청한 기능을 처리하는 역할
public class MusicController {

	private ArrayList<Music> list = new ArrayList<>();

	public void insertMusic(String title, String artist) {
		list.add(new Music(title, artist));

	}

	public ArrayList<Music> selectList() {
		return list; // view에서 호출 해야하기 때문에 요기에는 리스트만 전달 해주기.
	}

	public ArrayList<Music> searchMusic(int search, String keyword) {

		// list.get(0).getTitle() keyword 포함되어있나요?
		// list.get(1).getTitle() keyword 포함되어있나요?
		// ... 마지막 인덱스

		// .equals() : 일치하는지
		// .contains() : 포함되어있는지

		// 검색한 결과(키워드가 포함되어있는 Music 객체들)를 보관할 리스트
		// view로 보내기위해 여러 검색어를 담을 수 있는 배열 객체를 하나 생성해서 보내는것이다.
		ArrayList<Music> searchList = new ArrayList<>();

		if (search == 1) { // 제목으로 검색
			for (int i = 0; i < list.size(); i++) {
				if (list.get(i).getTitle().contains(keyword)) {
					searchList.add(list.get(i));
				}

			}
		} else if (search == 2) { // 가수명으로 검색
			for (int i = 0; i < list.size(); i++) {
				if (list.get(i).getArtist().contains(keyword)) {
					searchList.add(list.get(i));
				}
			}
		} else { // 곡명 + 가수명으로 검색
			for (int i = 0; i < list.size(); i++) {
				if (list.get(i).getTitle().contains(keyword) || 
						list.get(i).getArtist().contains(keyword)) {
					searchList.add(list.get(i));
				}
			}

		}

		return searchList;
	}

	public int deleteMusic(String title) {

		int result = 0;

		for (int i = 0; i < list.size(); i++) {
			// Music 객체의 제목 == title
			if (list.get(i).getTitle().equals(title)) {
				list.remove(i);
//				System.out.println("성공적으로 삭제되었습니다.");
				result = 1;

			}
		}

		// result == 0 --> 삭재할 곡을 찾지 못한거임
		// result == 1 --> 성공적으로 삭제가 된거임

		return result;

	}
	public int updateMusic(String title, String upArtist, String upTitle) {
		
		int result = 0; 
		
		for(int i=0; i<list.size(); i++) {
			if(list.get(i).getTitle().equals(title)) { // 수정할 곡을 찾은 경우 
				
				// 첫번쨰 방법. 해당 MUsic 객체에 setter메소드 이용해서 변경
				//list.get(i)의 가수명 => upArtist
//				list.get(i).setArtist(upArtist);
				
				// list.get(i)의 곡명 => upTitle 
//				list.get(i).setTitle(upTitle);
				
				// 두번쨰 방법. 일치하는 곡의 인덱스를 가지고 새로운 Music 객체 바꾸는 방법 
				list.set(i, new Music(upTitle, upArtist));
				
//				System.out.println("성공적으로 수정되었습니다"); --> menu에서 출력해야함.
				result = 1; 
				
			}
		}//e.for
		
		//result => 0 --> 수정할 곡을 찾지 못함.. 
		//result => 1 --> 성공적으로 수정됨..
		
		return result; 
	}
	public ArrayList<Music> sortMusic(int menu) {
		
		//복사본 리스트 sortList 만들기 
		ArrayList<Music> sortList = new ArrayList</*[Music]*/>(); // 빈 리스트
		// 위에 있던 리스트를 요기로 다시 옮겨 주면 된다. 
		sortList.addAll(list); // 기존의 list에 있는거 통쨰로 옮겨 담기 
		
		// Collections.sort(정렬시키고자하는 리스트); 
		
		if(menu == 1 ) {	// 가수명 오름차순 정렬
			Collections.sort(sortList); 
		}else if(menu == 2) {	// 가수명 내림차순 정력
			
		}else if(menu == 3) {	// 곡명 오름차순 정렬
			
		}else {	// 곡명 내림차순 정렬 
			
		}	//e.if	// 위 가수 내림, 곡명 오름, 곡명, 내림 다 따로 따로 클래스 만들어줘야 함. 가수 오름으로 해결 안됨. 
		
		return sortList; 
	}
	
}









